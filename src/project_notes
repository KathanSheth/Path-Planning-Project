1.	Run the simulator as it is.
	Car remains as it is. NO moving. Because we do not have anything in next_x and next_y.
	- we have to put some value inside them.
	- Try with straight line code given in classroom

2.	Run the simulator with straight line code. 
	- Car moves straight. Into the tree!
	- First we have to make the car drive in the lane.

3.	Calculation with s and d. Conver them to x and y and supply them to next_x and next_y.
	- Car remains in the center lane.
	- Getting jerk, accel and other errors.
	- Speed is high, Corner points are getting bunched up and because of that we are not getting smooth path.
	- Better polynomial fit is required to make path smoother. Use spline.
	- Now, first focus on accel/jerk reduction.

4.	Accel/Jerk reduction
	- Define lane (1,2,3 ...)
	- Set reference speed as 49.5mph
	- define previous_size (Previous path points size). We have list of previous points which can help us during transition.
	  This is the last path which car was following before it does this particular run through the calculating more points.
	  Simulator informs us about that previous path.
	- Create a widely spaced list of (x,y) waypoints, evenly spaced at 30m. Later,we are going to interpolate these waypoints
	  with a spline and fill it with more points.
	- Keep track of reference state.
	- Create ptsx and ptsy points for path.
	- Use spline to create curve.
	- Use previous path logic to create a continuous path to create a path. Here we keep total 50 points at a time. Remind PACMAN
	  analogy. Create only number of points which are eaten by PACMAN.
	- NOTE : We are dealing with two sets of points. One is sparsed(far) waypoints which are in spline variable s and other is path planning points which are in next_x_vals/y_vals

    - Accel/Jerk done

5.	Still we have Jerk at very beginning and collision problem. We will work on collision now.

	- Now the sensor fusion comes into play. Sensor Fusion data are provided by simulator.
	- It is a vector of vector with some quantities.
	- First, we have to check if the car is in our lane. We can check this with d.
	- We have to find the s value in "future".
	- If we are using previous points, we can project the s value outword in time. If we are using the previous path points, we are
	  not still there. So we are actually want to looking at what the car will look like in future. 
	- If we are looking at previous path points, our path represents a future but we are looking at the current snapshot of where our car sits and
	  all other car sits. So from previous path perspective we want to say where those other cars will look like in future.

	- After getting s in future, we are reducing the speed if the vehicle in same lane and the distance between us and other car is >30m
	- But as soon as it sees other vehicle at 30 m, the car exceeding the accel request of 10 m/s/s

6.	So we have accel/jerk issue at beginning and when it detects other car.
	- We have to ramp in/out the velocity to avoid it. 
	- Simple. Incread ref vel in steps.